/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var tavg = ee.ImageCollection("users/spotter/wcv2_tavg"),
    tmax = ee.ImageCollection("users/spotter/wcv2_tmax"),
    tmin = ee.ImageCollection("users/spotter/wcv2_tmin"),
    bio = ee.ImageCollection("users/spotter/wcv2_bio"),
    tree_cover = ee.ImageCollection("GLCF/GLS_TCC"),
    modis_dummy = ee.ImageCollection("MODIS/006/MOD13A1"),
    ruggedness = ee.Image("users/spotter/gruber_ruggedness"),
    pfi = ee.Image("users/spotter/gruber_pfi"),
    dem = ee.ImageCollection("users/spotter/burns_dem"),
    twi = ee.ImageCollection("users/spotter/twi_30m"),
    L8 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR"),
    landsat_samples = ee.FeatureCollection("users/spotter/combustion_scaling/original/landsat/all_years"),
    modis_samples = ee.FeatureCollection("users/spotter/combustion_scaling/original/modis/all_years_pts"),
    geometry = ee.FeatureCollection("users/spotter/brendan_veg/ABoVE_Study_Domain"),
    DB = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_DB"),
    BS = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_BS"),
    GR = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_GrassShrub"),
    JP = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_JP"),
    non = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_NonVeg"),
    ocon = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_OtherCon"),
    WS = ee.Image("users/spotter/brendan_veg/ABoVE_VegMap_msin_500m_V1_WS"),
    clay = ee.Image("users/spotter/Soil_Grids_Integrals/Clay_Pct_30_agg"),
    coarse = ee.Image("users/spotter/Soil_Grids_Integrals/Coarse_Pct_30_agg"),
    soc_content = ee.Image("users/spotter/Soil_Grids_Integrals/SOC_Stock_30_agg"),
    sand = ee.Image("users/spotter/Soil_Grids_Integrals/Sand_Pct_30_agg"),
    silt = ee.Image("users/spotter/Soil_Grids_Integrals/Silt_Content_30_agg"),
    soil_ph = ee.Image("users/spotter/Soil_Grids_Integrals/Soil_pH_H2O_30_agg"),
    s_2001 = ee.Image("users/spotter/combustion_scaling/stand_ages/2001"),
    s_2002 = ee.Image("users/spotter/combustion_scaling/stand_ages/2002"),
    s_2003 = ee.Image("users/spotter/combustion_scaling/stand_ages/2003"),
    s_2004 = ee.Image("users/spotter/combustion_scaling/stand_ages/2004"),
    s_2005 = ee.Image("users/spotter/combustion_scaling/stand_ages/2005"),
    s_2006 = ee.Image("users/spotter/combustion_scaling/stand_ages/2006"),
    s_2007 = ee.Image("users/spotter/combustion_scaling/stand_ages/2007"),
    s_2008 = ee.Image("users/spotter/combustion_scaling/stand_ages/2008"),
    s_2009 = ee.Image("users/spotter/combustion_scaling/stand_ages/2009"),
    s_2010 = ee.Image("users/spotter/combustion_scaling/stand_ages/2010"),
    s_2011 = ee.Image("users/spotter/combustion_scaling/stand_ages/2011"),
    s_2012 = ee.Image("users/spotter/combustion_scaling/stand_ages/2012"),
    s_2013 = ee.Image("users/spotter/combustion_scaling/stand_ages/2013"),
    s_2014 = ee.Image("users/spotter/combustion_scaling/stand_ages/2014"),
    s_2015 = ee.Image("users/spotter/combustion_scaling/stand_ages/2015"),
    s_2016 = ee.Image("users/spotter/combustion_scaling/stand_ages/2016"),
    s_2017 = ee.Image("users/spotter/combustion_scaling/stand_ages/2017");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//------------------------------------------------This script will extract from all the above predictors the values for the 
//------------------------------------------------the sample of landsat and modis paxels and export to csv

//--------------------------------------------still need to add land cover, elevation, slope, aspect, TWI
//add time stamps for stand ages
var s_2001 = s_2001.set('system:time_start', '2001-01-01');
var s_2002 = s_2002.set('system:time_start', '2002-01-01');
var s_2003 = s_2003.set('system:time_start', '2003-01-01');
var s_2004 = s_2004.set('system:time_start', '2004-01-01');
var s_2005 = s_2005.set('system:time_start', '2005-01-01');
var s_2006 = s_2006.set('system:time_start', '2006-01-01');
var s_2007 = s_2007.set('system:time_start', '2007-01-01');
var s_2008 = s_2008.set('system:time_start', '2008-01-01');
var s_2009 = s_2009.set('system:time_start', '2009-01-01');
var s_2010 = s_2010.set('system:time_start', '2010-01-01');
var s_2011 = s_2011.set('system:time_start', '2011-01-01');
var s_2012 = s_2012.set('system:time_start', '2012-01-01');
var s_2013 = s_2013.set('system:time_start', '2013-01-01');
var s_2014 = s_2014.set('system:time_start', '2014-01-01');
var s_2015 = s_2015.set('system:time_start', '2015-01-01');
var s_2016 = s_2016.set('system:time_start', '2016-01-01');
var s_2017 = s_2017.set('system:time_start', '2017-01-01');

var stand_age = ee.ImageCollection([s_2001, s_2002, s_2003, s_2004, s_2005, s_2006, s_2007, s_2008,
                                     s_2009, s_2010, s_2011, s_2012, s_2013, s_2014, s_2015, s_2016, s_2017]);

//first image in modis dummy - used for reprojection metadata
var modis_dummy = modis_dummy.first().select('NDVI');




//
// color pallettes
var palettes = require('users/gena/packages:palettes');
var style = require('users/gena/packages:style');
var utils = require('users/gena/packages:utils');

//function to resample the resolution when necessary
var resample = function(input_image, original_scale, output_scale){
  // first reproject PTC to MODIS but keep scale at 30m to ensure
  // that reduceRegions will not run into issues near the poles
  input_image.reproject({
    crs: 'SR-ORG:6974',
    scale: original_scale
  })
  // then downsample by averaging 30m pixels instead of using nearest neighbor
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    bestEffort: false,
    maxPixels: 10e3
  })
  .reproject({
    crs: 'SR-ORG:6974',
    scale: output_scale
  });
};

//function to extract landsat data, input is sample points, ind_var is what to extract, proj is what projection to use
var land_extract = function(input, ind_var, scale, crs) {
  // var sub = ind_var.resample('bilinear').reproject(L8.first().projection().atScale(L8.first().projection().nominalScale()));
  var sampled = ind_var.sampleRegions({collection: input,
                                scale: scale,
                                // projection: 'EPSG:4326',
                                projection: crs,
                                tileScale: 16,
                                geometries: false
  });

  return sampled;                                                                       
};

// Use an equals filter to define how the collections match.
var land_filter = ee.Filter.equals({
  leftField: 'ID2',
  rightField: 'ID2'
});

// var land_filter = ee.Filter.equals({
//   leftField: 'land_ID2',
//   rightField: 'land_ID2'
// });

// Create the join.
var simpleJoin = ee.Join.saveFirst( {matchKey:'key'});

//function to join the tables, left is left_table, right is right_table, filter is filter of choice
var join_all = function(left, right, filter) {
  var join = simpleJoin.apply(left, right, filter);
 
 //flatten the key feature so its one table
  var join = join.map(function(f) {
  var f1 = ee.Feature(f);
  var f2 = ee.Feature(f.get('key')).toDictionary();
  return ee.Feature(f1).set(f2).set('key', null);   
});

  return join;                                                                       
};


var distDir = 1;

// define function to calculate a spectral index to segment with LT
var get_NBR = function(img) {
    var index = img.normalizedDifference(['B4', 'B7'])                     
                  .multiply(1000)                                        
                  .select([0], ['NBR'])                                    
                  .set('system:time_start', img.get('system:time_start')); 
    return index ;
};
var get_NDVI = function(img) {
    var index = img.normalizedDifference(['B4', 'B3'])                     
                  .multiply(1000)                                        
                  .select([0], ['NDVI'])                                    
                  .set('system:time_start', img.get('system:time_start')); 
    return index ;
};

var get_NDII = function(img) {
    var index = img.normalizedDifference(['B4', 'B5'])                     
                  .multiply(1000)                                        
                  .select([0], ['NDII'])                                    
                  .set('system:time_start', img.get('system:time_start')); 
    return index ;
};


//tasseled cap coefficients
var coefficients = ee.Array([
  [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
  [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
  [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],
  [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],
  [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],
  [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]
]);
    

//function to get tasseled cap
var get_tc = function(image){
  return image.addBands(ee.Image(coefficients).matrixMultiply(image.toArray().toArray(1)).arrayProject([0])
  .arrayFlatten(
    [['brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']]));
};



//begin the iteration
var burn_years = [2004, 2006, 2012, 2014, 2015];
var burn_years2 = ['2004', '2006', '2012', '2014', '2015'];

// var burn_years = [2004];
// var burn_years2 = ['2004'];

//dict for tc years
var tc_years = [ee.Number(2000), ee.Number(2005), ee.Number(2010), ee.Number(2010), ee.Number(2010)];

var tc_dict = ee.Dictionary.fromLists(burn_years2, tc_years);

// var tc_years = [ee.Number(2000)];
// var tc_dict = ee.Dictionary.fromLists(burn_years2, tc_years);

// var landsat_samples = landsat_samples.filter(ee.Filter.eq("ID2", "2004_4"));

//rename
// var bd = bd.select('b1').rename('BD_30');
var clay = clay.select('b1').rename('Clay_30');
var sand = sand.select('b1').rename('Sand_30');
var silt = silt.select('b1').rename('Silt_30');
var soil_ph = soil_ph.select('b1').rename('pH_30');
var soc = soc_content.select('b1').rename('SOC_30');
var pfi = pfi.select('b1').rename('PFI');
var ruggedness = ruggedness.select('b1').rename('Ruggedness');
var BS = BS.select('b1').rename('BS');
var DB = DB.select('b1').rename('DEC');
var GR = GR.select('b1').rename('GRSH');
var JP = JP.select('b1').rename('JP');
var non = non.select('b1').rename('NV');
var ocon = ocon.select('b1').rename('OCON');
var WS = WS.select('b1').rename('WS');

var BS = BS.where(BS.eq(-32767), 0);
var DB = DB.where(DB.eq(-32767), 0);
var GR = GR.where(GR.eq(-32767), 0);
var JP = JP.where(JP.eq(-32767), 0);
var non = non.where(non.eq(-32767), 0);
var ocon = ocon.where(ocon.eq(-32767), 0);
var WS = WS.where(WS.eq(-32767), 0);

var twi = twi.mean().select('b1').rename('TWI');


//resample pfi and ruggedness with bilinear
// var pfi = pfi.resample('bilinear');
// var ruggedness = ruggedness.resample('bilinear');


//get slope
var slope_fun = function(image){
  return ee.Terrain.slope(image);

};

var slope = dem.map(slope_fun).mean();

var aspect_fun = function(image){
  return ee.Terrain.aspect(image);

};

var aspect = dem.map(aspect_fun).mean();

var dem = dem.mean().select('b1').rename('elevation');


var feat_iteration = ee.FeatureCollection(burn_years.map(function(element){
  
  //get tc_year from dictionary
  var tc_year = tc_dict.get(String(element));

  //start date
  var start = element - 1;
  var end = element + 1;
  
    //------------------------------------------------harmonize landsat
  // define years and dates to include in landsat image collection
  var startYear  = String(start);    // what year do you want to start the time series 
  var endYear    = String(end);    // what year do you want to end the time series
  var startDay   = '01-01'; // what is the beginning of date filter | month-day
  var endDay     = '12-30'; // what is the end of date filter | month-day
  
  //########################################################################################################
  //##### ANNUAL SR TIME SERIES COLLECTION BUILDING FUNCTIONS ##### 
  //########################################################################################################
  
  //----- MAKE A DUMMY COLLECTOIN FOR FILLTING MISSING YEARS -----
  var dummyCollection = ee.ImageCollection([ee.Image([0,0,0,0,0,0]).mask(ee.Image(0))]); // make an image collection from an image with 6 bands all set to 0 and then make them masked values
  
  
  //------ L8 to L7 HARMONIZATION FUNCTION -----
  // slope and intercept citation: Roy, D.P., Kovalskyy, V., Zhang, H.K., Vermote, E.F., Yan, L., Kumar, S.S, Egorov, A., 2016, Characterization of Landsat-7 to Landsat-8 reflective wavelength and normalized difference vegetation index continuity, Remote Sensing of Environment, 185, 57-70.(http://dx.doi.org/10.1016/j.rse.2015.12.024); Table 2 - reduced major axis (RMA) regression coefficients
  var harmonizationRoy = function(oli) {
    var slopes = ee.Image.constant([0.9785, 0.9542, 0.9825, 1.0073, 1.0171, 0.9949]);        // create an image of slopes per band for L8 TO L7 regression line - David Roy
    var itcp = ee.Image.constant([-0.0095, -0.0016, -0.0022, -0.0021, -0.0030, 0.0029]);     // create an image of y-intercepts per band for L8 TO L7 regression line - David Roy
    var y = oli.select(['B2','B3','B4','B5','B6','B7'],['B1', 'B2', 'B3', 'B4', 'B5', 'B7']) // select OLI bands 2-7 and rename them to match L7 band names
              .resample('bicubic')                                                          // ...resample the L8 bands using bicubic
              .subtract(itcp.multiply(10000)).divide(slopes)                                // ...multiply the y-intercept bands by 10000 to match the scale of the L7 bands then apply the line equation - subtract the intercept and divide by the slope
              .set('system:time_start', oli.get('system:time_start'));                      // ...set the output system:time_start metadata to the input image time_start otherwise it is null
    return y.toShort();                                                                       // return the image as short to match the type of the other data
  };
  
  //------ RETRIEVE A SENSOR SR COLLECTION FUNCTION -----
  var getSRcollection = function(startYear, endYear, startDay, endDay, sensor) {
    // get a landsat collection for given year, day range, and sensor
    var srCollection = ee.ImageCollection('LANDSAT/'+ sensor + '/C01/T1_SR') // get surface reflectance images
                        // .filterBounds(aoi)                                  // ...filter them by intersection with AOI
                        .filterDate(startYear+'-'+startDay, endYear+'-'+endDay);    // ...filter them by year and day range
    
    // apply the harmonization function to LC08 (if LC08), subset bands, unmask, and resample           
    srCollection = srCollection.map(function(img) {
      var dat = ee.Image(
        ee.Algorithms.If(
          sensor == 'LC08',                                                  // condition - if image is OLI
          harmonizationRoy(img.unmask()),                                    // true - then apply the L8 TO L7 alignment function after unmasking pixels that were previosuly masked (why/when are pixels masked)
          img.select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'])                   // false - else select out the reflectance bands from the non-OLI image
            .unmask()                                                       // ...unmask any previously masked pixels 
            .resample('bicubic')                                            // ...resample by bicubic 
            .set('system:time_start', img.get('system:time_start'))         // ...set the output system:time_start metadata to the input image time_start otherwise it is null
        )
      );
      
      // make a cloud, cloud shadow, and snow mask from fmask band
      var qa = img.select('pixel_qa');                                       // select out the fmask band
      var mask = qa.bitwiseAnd(8).eq(0).and(                                 // include shadow
                qa.bitwiseAnd(16).eq(0)).and(                               // include snow
                qa.bitwiseAnd(32).eq(0));                                   // include clouds
      
      // apply the mask to the image and return it
      return dat.mask(mask); //apply the mask - 0's in mask will be excluded from computation and set to opacity=0 in display
    });
  
    return srCollection; // return the prepared collection
  };
  
  
  //------ FUNCTION TO COMBINE LT05, LE07, & LC08 COLLECTIONS -----
  var getCombinedSRcollection = function(startYear, endYear, startDay, endDay) {
      var lt5 = getSRcollection(startYear, endYear, startDay, endDay, 'LT05');       // get TM collection for a given year, date range, and area
      var le7 = getSRcollection(startYear, endYear, startDay, endDay, 'LE07');       // get ETM+ collection for a given year, date range, and area
      var lc8 = getSRcollection(startYear, endYear, startDay, endDay, 'LC08');       // get OLI collection for a given year, date range, and area
      var mergedCollection = ee.ImageCollection(lt5.merge(le7).merge(lc8)); // merge the individual sensor collections into one imageCollection object
      return mergedCollection;                                              // return the Imagecollection
  };
  
  //get harmonzied collection
  var input_collection = getCombinedSRcollection(startYear, endYear, startDay, endDay);

  
  //------------------------resample bulk density to landsat and modis than extract
  // var landsat_samples2 = landsat_samples.filter(ee.Filter.eq("burn_yr", element));
  var landsat_samples2 = modis_samples.filter(ee.Filter.eq("burn_yr", element));
  
 
  //------------------------resample tree_cover to landsat and modis than extract
  var date1 = ee.Date.fromYMD(tc_year, ee.Number(1), ee.Number(1));
  var date2 = ee.Date.fromYMD(tc_year, ee.Number(12), ee.Number(31));
  
  var sdate1 = ee.Date.fromYMD(ee.Number(element), ee.Number(1), ee.Number(1));
  var sdate2 = ee.Date.fromYMD(ee.Number(element), ee.Number(12), ee.Number(31));
  
  
  var tree_cover2 = tree_cover.filter(ee.Filter.date(date1, date2)).mean().select('tree_canopy_cover');
  var stand_age2 = stand_age.filter(ee.Filter.date(sdate1, sdate2)).mean().select('b1').rename('stand_age');
  
  Map.addLayer(landsat_samples2)
  Map.addLayer(stand_age2)

  //NBR - b4, b7
  var nbr = input_collection.map(get_NBR)                                            
          .map(function(img) {return img.multiply(distDir)           
          .set('system:time_start', img.get('system:time_start'))}); 
           
  //NDVI - b4, b3
  var ndvi = input_collection.map(get_NDVI)                                            
          .map(function(img) {return img.multiply(distDir)           
          .set('system:time_start', img.get('system:time_start'))}); 
           
  //NDII - b3, b4
  var ndii = input_collection.map(get_NDII)                                            
          .map(function(img) {return img.multiply(distDir)           
          .set('system:time_start', img.get('system:time_start'))}); 
          
  var ndii = ndii.filterDate(String(end) + '-05-16', String(end) + '-06-15').mean();
  var ndvi = ndvi.filterDate(String(end) + '-05-16', String(end) + '-06-15').mean();

  
  // Tasseled cap extract
  var tcap = input_collection.map(get_tc).select(['brightness', 'greenness', 'wetness']);
  var tcap = tcap.filterDate(String(end) + '-05-16', String(end) + '-06-15').mean();
  
  //get indices of interest
  var preNBR = nbr.filterDate(String(start) + '-06-01', String(start) + '-08-31').select('NBR').mean().select('NBR').rename('preNBR');
  var postNBR = nbr.filterDate(String(end) + '-06-01', String(end) + '-08-31').select('NBR').mean().select('NBR').rename('postNBR');
  
  var dnbr = preNBR.select('preNBR').subtract(postNBR.select('postNBR'));
  var dnbr = dnbr.select('preNBR').rename('dNBR');
 
  var burnIndices = preNBR.addBands(postNBR).addBands(dnbr);
  
  // calculate RBR  
  var rbr = burnIndices.expression(
            "b('dNBR') / (b('preNBR') + 1.001)")
            .rename('rbr').toFloat();
  
  var burnIndices = burnIndices.addBands(rbr);
  
// calculate RdNBR
  var preNBR2 = burnIndices.expression(
    "(b('preNBR') < 0.001) ? 0.001" + 
      ": b('preNBR')")
      .sqrt().rename('preNBR2').toFloat();
  
  var burnIndices = burnIndices.addBands(preNBR2);

  var rdnbr = burnIndices.expression(
    "(b('dNBR') / sqrt(b('preNBR2')))")
    .rename('rdnbr').toFloat().addBands(burnIndices);
  
  var rdnbr = rdnbr.select(['dNBR', 'rbr', 'rdnbr']);
    


  //-------------------------------------------start to gather all extractions
  var mod_treec = land_extract(landsat_samples2, tree_cover2, 30, 'EPSG:4326');
 
 
  var tcap = input_collection.map(get_tc).select(['brightness', 'greenness', 'wetness']);
  var tcap = tcap.filterDate(String(end) + '-05-16', String(end) + '-06-15').mean();
  
  //get all the 30m bands
  var all_30_bands = rdnbr.addBands(tree_cover2).addBands(tcap).addBands(ndvi).addBands(ndii).
                  addBands(twi).addBands(aspect).addBands(slope).addBands(dem);
  
  //get all the 250m bands
  var all_250_bands = sand.addBands(silt).addBands(clay).
                      addBands(soil_ph).addBands(soc);
                      
  //get all_500_bands
  var all_500_bands = BS.addBands(DB).addBands(GR).addBands(JP).addBands(non).
                      addBands(ocon).addBands(WS).addBands(stand_age2);
  
  //get all_500_bands
  var all_1000_bands = ruggedness.addBands(pfi);
                 
  // var mod_30_result = land_extract(modis_samples2, all_30_bands, 30, 'EPSG:4326');
  // var mod_250_result = land_extract(landsat_samples2, all_250_bands, 250, 'EPSG:4326');
  var mod_500_result = land_extract(landsat_samples2, all_500_bands, 500, 'SR-ORG:6974');
  var mod_1000_result = land_extract(landsat_samples2, all_1000_bands, 1000, 'EPSG:4326');
  

  var mod_result = join_all(mod_500_result, mod_1000_result, land_filter);
  // var mod_result = join_all(mod_result, mod_500_result, land_filter);
  // var mod_result = join_all(mod_result, mod_1000_result, land_filter);
  
  
  print(mod_result.size());
  return(mod_result);

}));


// // print(feat_iteration.flatten().limit(100))
// var minMax = pfi.reduceRegion(ee.Reducer.percentile([1, 99]), Map.getBounds(true), Map.getScale()).values();

// var min = ee.Number(minMax.get(0));
// var max = ee.Number(minMax.get(1));

// var palette = palettes.colorbrewer.Paired[12];
// var styled = pfi.visualize({ min: min, max: max, palette: palette });

// Map.addLayer(styled);
// // Map.addLayer(modis_samples);

Export.table.toCloudStorage({
  collection: feat_iteration.flatten(),
  bucket: 'smp-scratch',
  description: 'landsat_native_rest',
  fileFormat: 'CSV'
});

print(feat_iteration.flatten())
